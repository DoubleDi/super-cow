-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package super-cow
@version 0.1


-- | Основные типы данных
module Type

-- | Высота (координата Х)
type Height = Float

-- | Ширина (Координата Y)
type Offset = Float

-- | Координаты обьекта в пространстве
type Position = (Offset, Height)

-- | Жизни
type Life = Int

-- | Счет
type Score = Int

-- | Размер
type Size = Float

-- | Скорость
type Speed = Float

-- | Картинка заднего фона
data BackgroundPicture
BackgroundPicture :: Position -> BackgroundPicture

-- | Положение картинки
[backgroundPicturePosition] :: BackgroundPicture -> Position

-- | Фон
data Background
Background :: [BackgroundPicture] -> Speed -> Background

-- | Множество картинок, составляющих фон
[mapBackgroundPicture] :: Background -> [BackgroundPicture]

-- | Скорость движения фона
[backgroundPictureSpeed] :: Background -> Speed

-- | Босс
data Boss
Boss :: Life -> Float -> Float -> Boss

-- | Жизни
[bossHealth] :: Boss -> Life

-- | Урон
[bossDamage] :: Boss -> Float

-- | Сложность
[bossHardness] :: Boss -> Float

-- | Режим игры
data Mode

-- | Режим Босса
BossMode :: Boss -> Mode

-- | Режим без бонусов и клеверов
NightmareMode :: Float -> Mode

-- | Обычный режим
OrdinaryMode :: Float -> Mode

-- | Режим без бонусов
NoBonusMode :: Float -> Mode

-- | Изображения объектов игровой вселенной
data Images
Images :: Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Images

-- | Изображение коровы
[imageCow] :: Images -> Picture

-- | Изображение размытой коровы
[imageCowBlurred] :: Images -> Picture

-- | Изображение клевера
[imageClover] :: Images -> Picture

-- | Изображение Хорошей птички
[imageGoodBirdUp] :: Images -> Picture

-- | Изображение Хорошей птички 2
[imageGoodBirdDown] :: Images -> Picture

-- | Изображение Плохой птички
[imageBadBirdUp] :: Images -> Picture

-- | Изображение Плохой птички
[imageBadBirdDown] :: Images -> Picture

-- | Изображение Неба
[imageSkyWithGrass] :: Images -> Picture

-- | Изображение конца игры
[imageGameOver] :: Images -> Picture

-- | Изображение пончика
[imageDonut] :: Images -> Picture

-- | Изображение бонуса, пончикового бластера
[imageDonutStar] :: Images -> Picture

-- | Изображение бонуса, ускорителя
[imageFasterStar] :: Images -> Picture

-- | Изображение бонуса, неуязвимости
[imageInvincibleStar] :: Images -> Picture

-- | Изображение случайного бонуса
[imageRandomStar] :: Images -> Picture

-- | Изображение бонуса, увеличения
[imageEnlargeStar] :: Images -> Picture


-- | Бонус
module Game.Bonus

-- | Бонус - изменение размера коровы
data CowSizeChange
CowSizeChange :: Size -> Float -> CowSizeChange

-- | Коэфицент изменение размера
[sizeMultiplier] :: CowSizeChange -> Size

-- | Время действия
[sizeChangeTime] :: CowSizeChange -> Float

-- | Бонус - изменение скорости птичек
data BirdSpeedChange
BirdSpeedChange :: Float -> Float -> Float -> Float -> Float -> BirdSpeedChange

-- | Коэфицент изменения скорости хорошей птички
[goodBirdSpeedMultiplier] :: BirdSpeedChange -> Float

-- | Коэфицент изменения скорости плохой птички
[badBirdSpeedMultiplier] :: BirdSpeedChange -> Float

-- | Коэфицент изменения скорости клевера
[cloverSpeedMultiplier] :: BirdSpeedChange -> Float

-- | Коэфицент изменения скорости бонуса
[bonusSpeedMultiplier] :: BirdSpeedChange -> Float

-- | Время действия
[birdSpeedChangetime] :: BirdSpeedChange -> Float

-- | Бонус - пончиковый бластер
data DonutGun
DonutGun :: Speed -> [Donut] -> Float -> Float -> Float -> DonutGun

-- | Скорость пончиков
[donutSpeed] :: DonutGun -> Speed

-- | Все пончики
[allDonuts] :: DonutGun -> [Donut]

-- | Время действия
[donutGuntime] :: DonutGun -> Float

-- | Время между пончиками
[timeBetweenDonuts] :: DonutGun -> Float

-- | Урон 1 пончика
[damage] :: DonutGun -> Float

-- | Бонус - неуязвимость
data Invincible
Invincible :: Float -> Life -> Invincible

-- | Время действия
[invincibleTime] :: Invincible -> Float

-- | Текущий уровень жизней
[invincibleLife] :: Invincible -> Life

-- | Обьект бонуса
data BonusItem
BonusItem :: Position -> Size -> BonusType -> Bool -> BonusItem

-- | Координаты
[bonusItemPosition] :: BonusItem -> Position

-- | Размер
[bonusItemSize] :: BonusItem -> Size

-- | Тип бонуса
[bonusItemType] :: BonusItem -> BonusType

-- | Показывать-ли тип бонуса?
[hidden] :: BonusItem -> Bool

-- | Обьект пончика
data Donut
Donut :: Position -> Size -> Donut

-- | Координаты
[donutPosition] :: Donut -> Position

-- | Размер
[donutSize] :: Donut -> Size

-- | Тип бонуса
data BonusType

-- | Неуязвимость
Inv :: BonusType

-- | Изменение размера игрока
SizeChange :: BonusType

-- | Изменение скорости объектов
BirdSpeed :: BonusType

-- | Пончиковый бластер
Gun :: BonusType

-- | Бонус
data Bonus

-- | Неуязвимость
InvincibleBonus :: Invincible -> Bonus

-- | Изменение размера игрока
CowSizeChangeBonus :: CowSizeChange -> Bonus

-- | Изменение скорости обьектов
BirdSpeedChangeBonus :: BirdSpeedChange -> Bonus

-- | Пончиковы бластер
DonutGunBonus :: DonutGun -> Bonus

-- | Случайный бонус
RandomBonus :: Bonus

-- | Без бонуса
NoBonus :: Bonus

-- | Нумеровка бонусов для случайной их генерации
intToBonusType :: Int -> BonusType

-- | Инициализировать новый объект бонус
initBonusItem :: (Position, BonusType, Int) -> BonusItem

-- | Обновить бонус
updateBonus :: Float -> Bonus -> Bonus

-- | Нужно-ли добавлять бонус неуязвимости?
tryAddInvincibleBonus :: Bonus -> Int -> Bonus

-- | Сколько времени длится бонус неузявимости после столкновения
defaultCollapseTime :: Float

-- | Размер объекта бонуса
defaultBonusItemSize :: Size
instance GHC.Classes.Eq Game.Bonus.Bonus
instance GHC.Classes.Eq Game.Bonus.DonutGun
instance GHC.Classes.Eq Game.Bonus.Donut
instance GHC.Classes.Eq Game.Bonus.Invincible
instance GHC.Classes.Eq Game.Bonus.BirdSpeedChange
instance GHC.Classes.Eq Game.Bonus.CowSizeChange


-- | Основные константы
module Const

-- | Экран | Ширина экрана
screenWidth :: Int

-- | Высота экрана
screenHeight :: Int

-- | Положение правого края экрана
screenRight :: Offset

-- | Положение левого края экрана
screenLeft :: Offset

-- | Положение верхнего края экрана
screenTop :: Height

-- | Положение нижнего края экрана
screenBottom :: Height

-- | Скорость фона
backgroundSpeed :: Speed

-- | Размер фона
backgroundPictureSizeWidth :: Offset

-- | Изначальная скорость движения игрока по вселенной - абсолютное
--   изменение
gameSpeed :: Speed

-- | Величина ускорения игры
speedIncrease :: Speed


-- | Препятствие
module Game.Obstacle

-- | Карта препятствий
data Map
Map :: [GoodBird] -> [BadBird] -> [Clover] -> [BonusItem] -> Speed -> Speed -> Speed -> Speed -> Map

-- | Все хорошие птички
[mapGoodBirds] :: Map -> [GoodBird]

-- | Все плохие птички
[mapBadBirds] :: Map -> [BadBird]

-- | Все клеверы
[mapClovers] :: Map -> [Clover]

-- | Все бонусы
[mapBonusItems] :: Map -> [BonusItem]

-- | Скорость хороших птичек
[obstacleSpeedGoodBird] :: Map -> Speed

-- | Скорость плохих птичек
[obstacleSpeedBadBird] :: Map -> Speed

-- | Скорость клеверов
[obstacleSpeedClover] :: Map -> Speed

-- | Скорость бонусов
[obstacleSpeedBonusItem] :: Map -> Speed

-- | Клевер - добавляет одну жизнь
data Clover
Clover :: Position -> Size -> Clover

-- | Положение в пространстве
[cloverPosition] :: Clover -> Position

-- | Размер
[cloverSize] :: Clover -> Size

-- | Плохая птичка - снимает 2 жизни
data BadBird
BadBird :: Position -> Size -> BadBird

-- | Положение в пространстве
[badBirdPosition] :: BadBird -> Position

-- | Размер
[badBirdSize] :: BadBird -> Size

-- | Хорошая птичка - снимает 1 жизни
data GoodBird
GoodBird :: Position -> Size -> GoodBird

-- | Положение в пространстве
[goodBirdPosition] :: GoodBird -> Position

-- | Размер
[goodBirdSize] :: GoodBird -> Size

-- | Реализация класса типов - препятствие
class Obstacle o
getPosition :: Obstacle o => o -> Position
getSize :: Obstacle o => o -> Size
setPosition :: Obstacle o => o -> Position -> o
setSize :: Obstacle o => o -> Size -> o
getHeight :: Obstacle o => o -> Size
getWidth :: Obstacle o => o -> Size

-- | Препятствие - клевер

-- | Препятствие - бонус

-- | Препятствие - плохая птичка

-- | Препятствие - хорошая птичка

-- | Препятствие - пончик

-- | Инициализировать клевер
initClover :: Position -> Clover

-- | Инициализировать плохую птичку
initBadBird :: Position -> BadBird

-- | Инициализировать хорошую птичку
initGoodBird :: Position -> GoodBird

-- | Инициализировать пончик
initDonut :: Position -> Donut

-- | Инициализировать карту препятствий
initMap :: StdGen -> Map

-- | Обновить карту игровой вселенной
updateMap :: Float -> Map -> Bonus -> Map

-- | Обновить препятствия игровой вселенной
updateObstacles :: Obstacle o => Float -> [o] -> Speed -> [o]

-- | Подвинуть все препятствия за пределы экрана
moveObstacles :: Map -> Float -> Map

-- | Обновить пончики
updateDonutPositions :: Float -> Position -> [Donut] -> Speed -> Float -> Score -> [Donut]

-- | Оставить только те препятствия, которые входят в экран
cropInsideScreen :: (Obstacle o) => [o] -> [o]

-- | Препятствия, которые не входят в экран
isOutsideScreen :: Obstacle o => o -> Bool

-- | Препятствия, которые входят в экран
isInsideScreen :: Obstacle o => o -> Bool

-- | Сталкивается ли препятствие с любыми препятствиями
collisionMulti :: (Obstacle o, Obstacle c) => c -> [o] -> Bool

-- | Обьект, с которым сталкивается препятствие
getCollisionObstacle :: (Obstacle o, Obstacle c) => c -> [o] -> o

-- | Сталкивается ли препяствие с другим препятствием
collides :: (Obstacle o, Obstacle c) => c -> o -> Bool

-- | Удаления обьекта, с которым столкнулись
collisionHandle :: (Obstacle c) => Map -> c -> Bonus -> Map

-- | Удаления НЕГАТИВНОГО обьекта, с которым столкнулись
badCollisionHandle :: (Obstacle c) => Map -> c -> Bonus -> Map

-- | Размер клевера
defaultCloverSize :: Size

-- | Размер плохой птички
defaultBadBirdSize :: Size

-- | Размер хорошей птички
defaultGoodBirdSize :: Size

-- | Размер пончика
defaultDonutSize :: Size

-- | Диапазон высот препятствий.
obstacleHeightRange :: (Height, Height)

-- | Диапазон типов бонусов
typeRange :: (Int, Int)

-- | Расстояние между препятствиями
defaultOffset :: Offset

-- | Диапазон, для вариации расстояния между препятсвтиями
obstacleOffsetRange :: (Offset, Offset)

-- | Изначальная скорость хорошей птички
originSpeedGoodBird :: Speed

-- | Изначальная скорость плохо птички
originSpeedBadBird :: Speed

-- | Изначальная скорость клевера
originSpeedClover :: Speed

-- | Изначальная скорость бонуса
originSpeedBonusItem :: Speed

-- | Изначальная скорость пончика
defaultDonutSpeed :: Speed
instance Game.Obstacle.Obstacle Game.Obstacle.Clover
instance Game.Obstacle.Obstacle Game.Bonus.BonusItem
instance Game.Obstacle.Obstacle Game.Obstacle.BadBird
instance Game.Obstacle.Obstacle Game.Obstacle.GoodBird
instance Game.Obstacle.Obstacle Game.Bonus.Donut


-- | Игрок
module Game.Player

-- | Корова
data Cow
Cow :: Position -> Size -> Speed -> Speed -> Float -> Float -> Int -> Bonus -> Cow

-- | Положение в пространстве
[cowPosition] :: Cow -> Position

-- | Размеры
[cowSize] :: Cow -> Size

-- | Cкорость по вертикали
[cowSpeedUp] :: Cow -> Speed

-- | Cкорость по горизонтали
[cowSpeedLeft] :: Cow -> Speed

-- | Угол наклона
[cowAngel] :: Cow -> Float

-- | Изменение угла наклона
[cowSpeedAngel] :: Cow -> Float
[cowPushed] :: Cow -> Int

-- | Бонус
[cowBonus] :: Cow -> Bonus

-- | Корова, как препятствие

-- | Инициализировать корову
initCow :: Cow

-- | Обновление положения коровы
updateCow :: Float -> Cow -> Cow

-- | Текущий размер коровы, учитывая бонусы
currentCowSize :: Size -> Bonus -> Size

-- | Передвижение коровы вверх и вниз, если можно.
goCowUpDown :: (Speed -> Speed) -> (Float -> Float) -> Int -> Cow -> Cow

-- | Передвижение коровы влево и вправо, если можно.
goCowLeftRight :: (Speed -> Speed) -> Cow -> Cow

-- | Ширина картинки коровы
cowPictureSizeWidth :: Cow -> Size

-- | Высота картинки коровы
cowPictureSizeHeight :: Cow -> Size

-- | Размер коровы
defaultCowSize :: Size

-- | Изменение высоты коровы при нажатии на клавиши (в пикселях)
cowSpeed :: Float

-- | Изначальный угол наклона коровы
cowAngelDefault :: Float

-- | Максимальный угол наклона положения коровы
maxAngle :: Float

-- | Минимальный угол наклона положения коровы
minAngle :: Float

-- | Положение коровы по горизонтали
cowInitOffset :: Offset

-- | Положение коровы по вертикали
cowInitHeight :: Height
instance Game.Obstacle.Obstacle Game.Player.Cow


-- | Игровая вселенная
module Game.Universe

-- | Игровая вселенная
data Universe
Universe :: Map -> Cow -> Score -> Life -> Bool -> Bool -> Background -> Mode -> Universe

-- | Препятствия игровой вселенной
[universeMap] :: Universe -> Map

-- | Корова
[universeCow] :: Universe -> Cow

-- | Cчет
[universeScore] :: Universe -> Score

-- | Жизни
[universeLife] :: Universe -> Life

-- | Флаг остановки игры
[universeStop] :: Universe -> Bool

-- | Флаг окончания игры
[universeGameOver] :: Universe -> Bool

-- | Задний фон
[universeBackground] :: Universe -> Background

-- | Режим игры
[universeMode] :: Universe -> Mode

-- | Убрать пончики, которые столкнулись
removeCollidedDonuts :: Map -> Universe -> Universe

-- | Проверить пончики на столкновения с другими обьектами
collideDonuts :: [Donut] -> Universe -> Universe

-- | Обновить положения пончиков
updateDonuts :: Float -> Universe -> Universe

-- | Обновить скорость движения коровы
updateSpeedCow :: (Cow -> Cow) -> Universe -> Universe

-- | Применить бонус ко вселенной
applyBonus :: Float -> Universe -> Universe

-- | Инифиализировать бонус во вселенной по его типу
initBonus :: BonusType -> Universe -> Bonus


-- | Интерфейс игры
module Interface

-- | Загрузка изображений
loadImages :: IO Images

-- | Отобразить игровую вселенную
drawUniverse :: Images -> Universe -> Picture

-- | Отобразить все препятствия игровой вселенной, вмещающихся в экран
drawObstacles :: Images -> Map -> Picture

-- | Отобразить одну картинку фона
drawBackgroundPicture :: Picture -> BackgroundPicture -> Picture

-- | Отобразить фон
drawBackground :: Picture -> Background -> Picture

-- | Нарисовать корову
drawCow :: Images -> Cow -> Picture

-- | Нарисовать корову, учитывая бонус
drawCowWithBonus :: Images -> Cow -> Bonus -> Picture

-- | Нарисовать счёт в левом верхнем углу экрана
drawScore :: Score -> Picture

-- | Нарисовать жизни в правом верхнем углу экрана
drawLife :: Life -> Picture

-- | Нарисовать надпись конца игры
drawGameOver :: Picture -> Bool -> Picture

-- | Нарисовать Бонус
drawBonusItem :: Images -> BonusItem -> BonusType -> Picture

-- | Нарисовать пончики от пончикового бластера
drawDonuts :: Images -> Bonus -> Picture

-- | Нарисовать препятствие
draw :: Obstacle o => Picture -> o -> Picture

-- | Оставить только те картинки фона, которые входят в экран
cropBackgroundInsideScreen :: [BackgroundPicture] -> [BackgroundPicture]


-- | Основной игровой модуль
module SuperCow

-- | Запустить игру «Super Cow»
runSuperCow :: Images -> IO ()

-- | Инициализировать игровую вселенную, используя генератор случайных
--   значений
initUniverse :: StdGen -> Universe

-- | Инициализировать фон задней картинки по положению
initBackgroundPicture :: Offset -> BackgroundPicture

-- | Илициализировать фон
initBackground :: Background

-- | Обработчик нажатий клавиш игры
handleUniverse :: Event -> Universe -> Universe

-- | Изменить сложность игры
toggleGameHardness :: Universe -> Int -> Universe

-- | Изменить сложность обьектов вселенной
toggleObstacleHardness :: Obstacle o => [o] -> (o -> o) -> [o]

-- | Проверка на конец игры
negativeLifeBalance :: Universe -> Bool

-- | Изменить активность игры (поставить паузу или проиграть)
toggleGame :: Universe -> Universe

-- | Применить режим игры ко вселенной
applyGameMode :: Universe -> Universe

-- | Обновить состояние игровой вселенной
updateUniverse :: Float -> Universe -> Universe

-- | Обновить положение картинки фона
updateBackground :: Float -> Background -> Background

-- | Обновить фон
updateBackgrounds :: Float -> [BackgroundPicture] -> Speed -> [BackgroundPicture]

-- | Обновить счет
updateScore :: Float -> Score -> Score

-- | Обновить жизни
updateLife :: Float -> Universe -> Universe
